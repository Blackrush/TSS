true ;;

# un terme mal typé
if true then lambda b : Bool. b else false ;;

# une terme bien typé
if true then false else true ;;

(lambda x : Bool -> Bool. x) (lambda y : Bool. y) ;;

let tru = lambda t : bool. lambda f : bool. t ;;

let fls = lambda t : bool. lambda f : bool. f ;;

let realbool = lambda b : bool -> bool -> bool.
	b true false ;;

realbool tru ;;

realbool fls ;;

let cond = lambda b : bool -> bool -> bool.
	   lambda t : bool.
	       lambda f : bool. b t f ;;

cond tru true false ;;

let churchbool = lambda b : bool. if b then tru else fls ;;

churchbool true ;;

churchbool false ;;

let realnat = lambda m : (Nat -> Nat) -> Nat -> Nat.
	m (lambda x : Nat. succ x) 0 ;;

let c2 = lambda s : (Nat -> Nat). lambda z : Nat. s (s z) ;;

realnat c2 ;;

let c5 = lambda s : (Nat -> Nat). lambda z : Nat. s (s (s (s (s z)))) ;;

realnat c5 ;;

# encore un terme mal typé
(lambda x : bool. x) (succ 0) ;;

# et un autre
realnat 0 ;;

succ ;;
